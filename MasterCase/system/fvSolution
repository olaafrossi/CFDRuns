/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    p
    {
        solver          GAMG;
        smoother        GaussSeidel;
        tolerance       1e-8;
        relTol          0.001;
        nPreSweeps      0; // number of sweeps as the algorithm is coarsening (default 0).
        nPostSweeps     2; //number of sweeps as the algorithm is refining (default 2).
        cacheAgglomeration  on;
        agglomerator        faceAreaPair;
        nCellsInCoarsestLevel 1000;
        mergeLevels 1;
        //postSweepsLevelMultiplier: multiplier for the the number of sweeps between each refinement level (default 1).
        //maxPostSweeps: maximum number of sweeps as the algorithm is refining (default 4).
        //nFinestSweeps: number of sweeps at finest level (default 2).
        //preSweepsLevelMultiplier: multiplier for the the number of sweeps between each coarsening level (default 1).
        //maxPreSweeps: maximum number of sweeps as the algorithm is coarsening (default 4).
        //cacheAgglomeration: switch specifying caching of the agglomeration strategy (default true).
        //nCellsInCoarsestLevel: approximate mesh size at the most coarse level in terms of the number of cells (default 10).
        //directSolveCoarset: use a direct solver at the coarsest level (default false).
        //mergeLevels: keyword controls the speed at which coarsening or refinement is performed; the default is 1, which is safest, but for simple meshes, the solution speed can be increased by coarsening/refining 2 levels at a time, i.e. setting mergeLevels 2.
    }

    Phi
    {
        $p;
    }

    U
    {
        solver          smoothSolver;
        smoother        symGaussSeidel;
        tolerance       1e-7;
        relTol          0.01;
        nSweeps         1;
    }

    k
    {
        solver          smoothSolver;
        smoother        GaussSeidel;
        tolerance       1e-7;
        relTol          0.01;
        nSweeps         1;
    }

    omega
    {
        solver          smoothSolver;
        smoother        GaussSeidel;
        tolerance       1e-7;
        relTol          0.01;
        nSweeps         1;
    }
}

SIMPLE
{
    nNonOrthogonalCorrectors 2; //wolf says to always use 2, or 1 if too slow
    consistent yes;
}

potentialFlow
{
    nNonOrthogonalCorrectors 10;
}

relaxationFactors // lower the value, converge will be slower but more accurate the solution. Higher values might occsliate
{
    equations
    {
        p               0.2;
        U               0.5;
        k               0.5;
        omega           0.5;
    }
}

cache
{
    grad(U);
}

// ************************************************************************* //
